MERN From Scratch 2023 | eCommerce Platform
 - Brad Traversy
08/07/2023
 92. Wrap Up
 91. Adding a Custom Domain
 90. Add Server IP To MongoDB Atlas
 89. Deploy To Render
 88. Prepare For Production
Section 13: Deploy To Production
Section 12: Reviews, Search & More
Section 11: Admin Functionality

 60. 
Section 10: Checkout Process - Part 2

 59. Creating An Order
 58. Order API Slice & Start Order Screen
 57. Create & Get Orders
 56. Order Routes & Controller
     # 
 55. Payment Method
     # Create a file PaymentScreen.jsx in frontend/src/screens
     # Write a reducer savePaymentMethod in cartSlice and export the action
 54. Checkout Steps Component
     # Create a file CheckoutSteps.jsx in frontend/src/components
 53. Private Routes
     # Create a file PrivateRoute.jsx in frontend/src/components
07/07/2023
 52. Shipping Screen
     # Create a file ShippingScreen.jsx in frontend/src/screens folder
Section 9: Checkout Process - Part 1

06/07/2023
 51. User Registration
 50. User Logout
 49. Login Functionality
     # Put the <ToastContainer /> after Footer
     # In App.js, import {ToastContainer} from "react-toastify"; import "react-toastify/dist/ReactToastify.css";
     PS D:frontend> npm i react-toastify
 48. Login Screen
     # Create files FormContainer.jsx and LoginScreen.jsx in components and screens
05/07/2023
 47. Auth & User API Slice
     # In usersApiSlice.js, inject login endpoint as builder.mutation to url /api/users/auth
     # Create files authSlice.js and usersApiSlice.js in frontend/src/slices
Section 8: Frontend Authentication

 46. User Profile Endpoints
 45. User Register Endpoint & Encryption
     # Create a folder utils in backend and a file generateToken.js
     # In userModel.js: userSchema.pre("save", this.password=await bcrypt.hash(this.password,salt);
     # In userController.js: registerUser, user = await User.create({ name, email, password });
 44. Logout User & Clear Cookie
     # In userController.js: logoutUser, res.cookie("jwt","",{httpOnly:true, expires:new Date(0)});
 43. Auth Middleware & Endpoint
     # In userRoutes.js, protect the relevant routes and test them in Postman
     # Decode the token as decoded = jwt.verify(token, process.env.JWT_SECRET);
     # In authMiddleware.js, write a protect function and read token = req.cookies.jwt;
     # In middleware, create file authMiddleware.js and import jwt from "jsonwebtoken";
     # in server.js, import cookieParser from 'cookie-parser'; app.use(cookieParser());
     PS D:proshop-v2> npm i cookie-parser
04/07/2023
 42. JWT HTTP Only Cookie
     # Test in Postman, copy the cookie, paste it in jwt.io to see the decoded form
     # res.cookie("jwt", token, {httpOnly:true, secure:process.env.NODE_ENV!=="development",
     #   sameSite: "strict", maxAge: 30 * 24 * 60 * 60 * 1000}); // 30 days in miliseconds
     # a token using jwt.sign({userId: user._id}, process.env.JWT_SECRET, {expiresIn: "30d"});
     # In userController.js, import jwt from "jsonwebtoken"; After password validation, create
     PS D:proshop-v2> npm i jsonwebtoken
 41. How Do JSON Web Tokens Work?
     # Jwt documentation: https://jwt.io/
 40. User Email & Password Validation
     # In userController.js, check for (user && (await user.matchPassword(password)))
     # In userModel.js, import bcrypt from "bcryptjs"; add a function matchPassword to userSchema.methods
     # app.use(express.urlencoded({ extended: true })); Write authUser function in userController.js
     # In server.js, activate body parser middleware: app.use(express.json()); and
 39. User Routes & Controller
     # Create a folder Users in Postman and create requests to test the routes
     # Create files userRoutes.js in backend/routes, and userController in backend/controllers
Section 7: Backend Authentication

 38. Remove From Cart
     # Add checkoutHandler function in CartScreen.jsx and attach it to the Checkout button
     # Add a reducer function removeFromCart in cartSlice.js, export and import in CartScreen
03/07/2023
 37. Cart Screen
     # In screens create CartScreen.jsx, and in index.js create a route for /cart
 36. Item Count In Header
     # import Badge from "react-bootstrap" to show the item count beside the Cart in the Header
 35. Cart Utils File
     # Cut all the calculations from addToCart and put them to updateCart function in cardUtils.js
     # Cut the function addDecimals from cardSlice.js, and put it into cardUtils.js
     # Create a folder utils in frontend/src, and a file cardUtils.js
 34. Qty & Add To Cart Handler
     # Add a local state qty, write addToCartHandler function which calls the addToCart action
02/07/2023
 33. Add To Cart Function
     # export const { addToCart } = cartSlice.actions;
     # Create a reducer function in cartSlice.js named addToCart
 32. Cart Slice & Reducer
     # In slices create cartSlice.js and import { createSlice } from "@reduxjs/toolkit";
Section 6: Shopping Cart Functionality

 31. Loader & Message Components
     # Import the Loader and Alert components to HomeScreen and ProductScreen
     # Create another component Message.jsx and import { Alert } from "react-bootstrap";
     # In components folder create a file Loader.jsx and import { Spinner } from "react-bootstrap";
01/07/2023
 30. Get Product Details Endpoint Challenge
     # In productsApiSlice.js, add a new endpoints builder query getProductDetails and export
 29. Products API Slice & Get Products Endpoint
     # In slices folder create a file productsApiSlice.js, import PRODUCTS_URL from constants.js
20/06/2023
 28. Redux Store & API Slice
     # In store.js, import { apiSlice } from './slices/apiSlice';
     # In apiSlice.js, import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
     # Create a folder slices in frontend/src and a file apiSlice.js inside
     # Create a file constants.js in frontend/src, export BASE_URL, PRODUCTS_URL, USERS_URL, etc.
     # Install Redux DevTools in both Chrome and Microsoft Edge
     # Wrap the RouterProvider line with: <Provider store={store}></Provider>
     # In frontend/index.js, import { Provider } from 'react-redux'; import store from './store';
     # Create a file store.js in fronend/src, import { configureStore } from "@reduxjs/toolkit";
     PS D:frontend> npm i @reduxjs/toolkit react-redux
 27. Redux & State Overview
     # Documentation Redux: https://redux.js.org/, Redux Toolkit: https://redux-toolkit.js.org/
Section 5: Redux Toolkit Setup & State Management

 26. Product Controller
     # Export two functions getProducts & getProductById, import them in productRoutes.js
     # Create a folder controllers in backend and a file productController.js
 25. Custom Error Middleware
     # In productRoutes.js, throw new Error("Resource not found"), when product is not found
     # Export two functions notFound, errorHandler and import them in server.js
     # Create a file errorMiddleware.js in backend/middleware
     # Express Error Handling documentation: https://expressjs.com/en/guide/error-handling.html
19/06/2023
 24. Get Products From Database
     # asyncHandler.js implements the functionality of express-async-handler (https://www.npmjs.com/package/express-async-handler)
     # Create a folder middleware in backend and a file asyncHandler.js inside
     # Create a folder routes in the backend and a file productRoutes.js in the folder
 23. Getting Started With Postman
     # Create a Request "Get All Products" as GET {{baseUrl}}/products in the Products folder
     # Create a variable "baseUrl" and set its value to "http://localhost:5000/api" in Proshop Environment
     # Create a Collection "Udemy MERN eCommerce Platform" and a folder "Products" underneath
     # Use the existing Workspace "Udemy Courses" but create a new environment "Proshop Environment" in Postman
 22. Seeding Sample Data
     # Add two more scripts, data:import and data:destroy, to the server package.json
     # In seeder.js check process.argv, and run destroyData if it is -d, otherwise run the importData
     # Create a file seeder.js in the backend folder and write two functions importData and destroyData
     PS D:proshop-v2> npm i colors
 21. Prepare Sample Data
     # export three sample users with hashed password from users.js
     PS D:proshop-v2> npm i bcryptjs
     # and create another file users.js for sample users in /backend/data
     # Remove (comment) the _id fields from the sample data in /backend/data folder
18/06/2023
 20. Modeling Our Data
     # Also create a userModel and an orderModel in models
     # Create a folder models in backend and a productModel.js file in models
 19. Connect With Mongoose
     # write a function connectDB in db.js, import and run it in server.js
     # Create a folder config in backend, and create a file db.js inside config
     PS D:proshop-v2> npm i mongoose
     # Documentation is at https://mongoosejs.com/
 18. MongoDB Compass Setup
     # Run MongoDB Compass, provide the Compass Uri and browse the data
     # Download MongoDB Compass from https://www.mongodb.com/products/compass
 17. MongoDB Atlas Setup
     # Modify the Uri to provide password and a databse name (proshop)
     # Set your MongoDB connet Uri to MONGO_URI in .env
Section 4: Starting MongoDB & Mongoose

 16. Fetch Products
17/06/2023
     # Add a line in frontend package.json before "dependencies" - "proxy": "http://localhost:5000"
     PS D:frontend> npm i axios
 15. Environment Variables
     # Set NODE_ENV="development" and PORT=5000 in the .env file
     # Create the .env file in the project root
     PS D:proshop-v2> npm i -D dotenv
 14. Nodemon & Concurrently
     # "dev": "concurrently \"npm run server\" \"npm run client\""
     # "client": "npm start --prefix frontend", and
     # Add three scripts in package.json: "server": "nodemon backend/server.js",
     PS D:proshop-v2> npm i -D nodemon concurrently
 13. Express Server & Initial Product Routes
     PS D:proshop-v2> npm i express
     # Create a folder named "backend" and create our entry point "server.js" inside it
     # and replace "test" within "scripts" with: "start: "node backend/server.js"
     # Modify package.json, add a line after description - "type": "module",
     PS D:proshop-v2> npm init
 12. Full Stack Workflow & Explanation
Section 3: Serving & Fetching Data

 11. Product Details Page
 10. Rating Component
     # Import it to the Product component, import Rating from "./Rating";
     # Create a new file Rating.jsx in components folder, and type rafce
  9. Implement React Router
     PS D:frontend> npm i react-router-bootstrap
     PS D:frontend> npm i react-router-dom
16/06/2023
  8. List Products
     # Now create a separate Product component, using Card from react-bootstrap
     # Import the HomeScreen in App.js, and put it in place the Welcome Heading
     # Make the page responsive through the props <Col sm={12} md={6} lg={4} xl={3}>
     # type rafce (for the bolierplate code), map through all the product.name in a Col tag within a Row
     # Add a screens folder in src and create a file HomeScreen.jsx inside the folder
     # Copy the images folder from the unzipped source code and paste it into the public folder
     # Create a file named products.js and paste the dummy products copied from QA (from a response)
  7. Custom Bootstrap Theme
     # Also remark the regular bootstrap.min.css line and import './assets/styles/bootstrap.custom.css';
     # Delete the default index.css and in index.js import './assets/styles/index.css';
     # Copy the assets folder from Github (https://github.com/bradtraversy/proshop-v2) frontend/src
  6. Header & Footer Components
     # Import the Footer in App.js, and put it below the main tag
     # Wrap it inside a footer tag and put in it a copyright symbol (&copy;)
     # In the components folder, add a new file Footer.jsx, and type rafce (for boilerplate code)
     # In App.js, import Header from "./components/Header"; and put it before the main tag
     # and import { FaShoppingCart, FaUser } from 'react-icons/fa';
     # In Header.jsx, import { Navbar, Nav, Container } from 'react-bootstrap';
     # Add a components folder in src and create a file Header.jsx inside the folder
     # Add Bootstrap in index.js (import 'bootstrap/dist/css/bootstrap.min.css';)
     PS D:frontend> npm i react-bootstrap bootstrap react-icons
     # Setup React bootstrap
  5. React Setup & Git Initialize
     PS D:proshop-v2> git push -u origin main
     PS D:proshop-v2> git branch -M main
     PS D:proshop-v2> git remote add origin git@github.com:mahbub1964/learning.git
     PS D:frontend> cd ..
     # Create a Git repository on github and add this as a remote repository in our project root
     # Then run git init to initialize a git repository in the project root, and perform initial commit
     # Also add a just .env line in the .gitignore file
     # In .gitignore, remove the starting "/" from /node_modules, so that all the node_modules are ignored
     PS D:frontend> mv .gitignore ..
     # Setup Git: Move the .gitignore to the project root
15/06/2023
     # Cleanup: remove logo.svg, App.test and App.css from src folder, clear everything in App.js and
     # type rafce for the boilerplate code. Then open index.html in the public folder and change the title
     PS D:frontend> npm start
     PS D:proshop-v2> cd frontend
     PS D:proshop-v2> npx create-react-app frontend
     # Will have three folders in proshop: frontend, backend and uploads
     PS D:udMernEcommPlt> cd proshop-v2
     PS D:udMernEcommPlt> mkdir proshop-v2
     # Other options: Vite - https://vitejs.dev/
     # Will use Create React App: https://create-react-app.dev/
Section 2: Starting The Front End

  4. Getting Setup
     # VS Code Extensions: "ES7+React/Redux/React-Native snippets", "Prettier - Code formatter",
       "Javascript (ES6) code snippets", "GitHub Copilot" and "GitHub Theme" (GitHub Dark)
     # Will use "React Developer Tools" and "Redux DevTools" in Chrome or FireFox
     # Create a new Postman Collection named "Udemy MERN Udemy Platform"
  3. Course Code Repo
     # GitHub Link: https://github.com/bradtraversy/proshop-v2
  2. Course Project Intro
  1. Wecome To The Course
Section 1: Introduction
