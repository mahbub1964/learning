The Ultimate Authentication Course with NodeJS and React
 - Antonio Papa
25/05/2023
 34. Displaying the QR Code
 33. Authenticator Form
 32. Expanding the Login Form
 31. Scanning and Sending the Authenticator Code
 30. Two Factor Authentication
Section 4: Two Factor Authentication

 29. Reset Password
 28. Forgot Password

25/05/2023
     PS D:react-js> 
     PS D:react-js> 
     PS D:react-js> 
     PS D:react-js> npm i react-router-dom
     # Copy SignIn.jsx to Login.jsx and remove unnecessary lines
     # Select Sign In, go to Source Code, open SignIn.js and copy contents to src/components/SignIn.jsx
     # Go to https://mui.com/material-ui/getting-started/templates/ (9+ Free React Templates)
     PS D:react-js> npm i @mui/icons-material
     PS D:react-js> npm i @mui/material @emotion/react @emotion/styled
     PS D:react-js> npm uninstall @testing-library/user-event
     PS D:react-js> npm uninstall @testing-library/react web-vitals
     PS D:react-js> npm uninstall @testing-library/jest-dom
24/05/2023
     PS D:react-js> npm start
     PS D:auth-mongoose> cd react-js
     PS D:auth-mongoose> npx create-react-app react-js
 ##  Create a React App within the auth-mongoose folder

 27. Using Redux
 26. Redux Toolkit
     PS D:react-auth> npm i -D @types/react-redux
     PS D:react-auth> npm i react-redux
     PS D:react-auth> npm i @reduxjs/toolkit

22/05/2023
 25. Logout
 24. Interceptors
 23. Authenticated User
 22. Login
 21. Register
     PS D:react-auth> npm i -D @types/axios
     PS D:react-auth> npm i axios
 20. Routes
     PS D:react-auth> npm i -D @types/react-router-dom
     PS D:react-auth> npm i react-router-dom

21/05/2023
 19. Components
     # Copy Login.tsx to Register.tsx, change labels, add First/Last Names and Password Confirm
     # Create "components" folder in src, a file "Login.tsx" and move codes from App.tsx
 18. Setup
     # Also copy the contents of signin.css, paste in App.css and remove the body and html parts
     # Then replace all class with className, for with htmlFor and remove image and copyright lines
     # Go to Examples, select Sign-in, view page-source, copy the main tag and replace div in App.tsx
     # Copy the css link from getbootstrap.com and paste in public/index.html before title
     # Remove App.text.tsx and logo.svg from the src folder
     PS D:react-auth> npm start
     PS D:udAuthNodeReact> cd react-auth
     PS D:udAuthNodeReact> npx create-react-app react-auth --template typescript
Section 3: React

19/05/2023
     # Once the authorization code is generated, click "Exchange authorization code for tokens"
     # Then click "Authorize APIs" button, select rscommsbd@gmail.com and continue.
     # In the left side, select "Gmail API v1": "https://mail.google.com/"
     # Check the box "Use your own OAuth credentials" and provide Client ID and secret
     # Click the Gear button (OAuth 2.0 Configuration"
     # Visit OAuth2 Playground: https://developers.google.com/oauthplayground
     # Add "Authorized redirect URIs" as "https://developers.google.com/oauthplayground"
     # Provide "Web application" as the "Application type" and Name as "OAuth2 Playground"
     # Click on "+Create Credentials" and choose "OAuth client ID"
     # Select "Credentials" in "APIs & Services" section
     # Add rscommsbd@gmail.com as a "Test user".
     # Upload RS.png as the App logo. Skip the "scopes" phase by clicking "Save and Continue"
     # Configure "App information":: App name: "RS Comms Web App" and email: rscommsbd@gmail.com
     # Configure "User Type" as "External" and click the "Create" button
     # Select "OAuth consent screen" in "APIs & Services" section
     # Select "Settings" and change the project name to "RS Comms Web App"
     # Use the hamburger menu in the top left to switch to the "IAM & Admin" section
 ##  Create a GCP account with rscommsbd@gmail.com

     PS D:auth-mongoose> npm i nodemailer
     PS D:auth-mongoose> npm i cookie-parser
     PS D:auth-mongoose> npm i jsonwebtoken
     PS D:auth-mongoose> npm i bcryptjs
     PS D:auth-mongoose> npm i mongoose
     PS D:auth-mongoose> npm i dotenv
     PS D:auth-mongoose> npm i body-parser
     PS D:auth-mongoose> npm i express
     PS D:auth-mongoose> npm init
 ##  Start build a new project named auth_mongoose similar to node_auth

18/05/2023
 17. Reset Password
 16. Sending Emails
     PS D:node-auth> npm i -D @types/nodemailer
     PS D:node-auth> npm i nodemailer
 15. Forgot Password
 14. Logout

17/05/2023
 13. Refreshing the Token
 12. Authenticated User
     PS D:node-auth> npm i -D @types/cookie-parser
     PS D:node-auth> npm i cookie-parser
 11. Cors
     PS D:node-auth> npm i dotenv
     PS D:node-auth> npm i -D @types/cors
     PS D:node-auth> npm i cors

16/05/2023
 10. Jwt
     PS D:node-auth> npm i -D @types/jsonwebtoken
     PS D:node-auth> npm i jsonwebtoken

15/05/2023
  9. Login
  8. Register
     ## Postman Error: conn ECONNREFUSED 127.0.0.1:8000
     ## Replaced 127.0.0.1 with localhost to fix the error
     PS D:node-auth> node -v # v18.16.0
     PS D:node-auth> nvm list
     PS D:node-auth> nvm use 18.16.0
     PS D:node-auth> nvm install 18.16.0
     PS D:node-auth> nvm list available (to see all the available node versions)
     PS D:node-auth> Download nvm-setup.zip and run the extracted nvm-setup.exe
     ## Modified ormconfig, "entities": ["src/entity/*.js"], to "src/entity/*.{js,ts}"
     ## in order to solve 'No metadata for "User" was found.'
     ## Worked with Node v16.16.0 (npm 8.16.0) at home
     PS D:node-auth> npm i -D ts-node
     # TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension ".ts"
     PS D:node-auth> npm i -D @types/bcryptjs
     PS D:node-auth> npm i bcryptjs
     PS D:node-auth> node -v # v20.1.0
     PS D:node-auth> winget upgrade -q NodeJS
     PS D:node-auth> Unsupported platform for n@9.1.0: wanted {"os":"!win32"} (current:{"os":"win32"})
     PS D:node-auth> npm i -g n
     PS D:node-auth> npm cache clean -f
     PS D:node-auth> npm i -g npm
     # Unsupported engine {required:{node: '>=16.14'}, current:{node: 'v16.13.1', npm: '8.18.0'}}
     PS D:node-auth> npm i bcryptjs
     # Add routes with post("/api/register") and auth controller with a Register function

12/05/2023
  7. Entities
     # Uncomment "experimentalDecorators": true, "emitDecoratorMetadata": true,
     # to enable the use of decorators in entities
     # Create a User entity
  6. TypeORM
     # Create ormconfig.json, copy from github.com/typeorm/typescript-express-example
     # and modify (add "logging": false)
     PS D:node-auth> npm i mysql2
     PS D:node-auth> npm i -D @types/node
     PS D:node-auth> npm i reflect-metadata
     PS D:node-auth> npm i typeorm
  5. MySQL
     # Create a new Schema named "node_auth"
     # Open MySQL Workbench (root/Pass@123)

11/05/2023
  4. Express
     # Modify package.json: (1) Add "type": "module", and
     # (2) change node to ts-node-esm in "start" script
     PS D:node-auth> npm i -g ts-node
     PS D:node-auth> npm i -D @types/express
     PS D:node-auth> npm i express
  3. Typescript
     # Modify package.json "start" script to "node src/index.ts"
     PS D:node-auth> tsc --init
     PS D:node-auth> npm i -D typescript
     PS D:node-auth> npm i -g typescript
     # Rename src/index.js to index.ts
  2. Setup
     # Rename "scripts": "test" to "start" and modify to "node src/index.js"
     PS D:node-auth> npm init
Section 2: Node

  1. Introduction
Section 1: Introduction
